{"version":3,"sources":["components/Card.js","components/Column.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Card","className","onClick","props","removeCard","card","taskId","this","columnId","reassignCard","task","Component","Column","addCard","event","keyCode","target","name","state","newTask","newCard","column","setState","currentTaskId","direction","handleTaskChange","value","bind","cards","currentColumn","columnTitle","type","placeholder","onKeyDown","onChange","map","cardIndex","key","Header","App","undefined","columns","push","filter","columnIndex","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d6cb860d.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport \"../styles/Card.css\"\r\n\r\nclass Card extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Card\">\r\n                <div className=\"Header\">\r\n                    <div className=\"Title\">\r\n                        <h3>Task</h3>\r\n                    </div>\r\n                    <div className=\"Close\">\r\n                        <h3 className=\"CloseButton\" onClick={() => { this.props.removeCard(this.props.card.taskId) }}>X</h3>\r\n                    </div>\r\n                </div>\r\n                <div className=\"Body\">\r\n                    {this.props.columnId === 1 || this.props.columnId === 2 ? <div className=\"moveLeft\">\r\n                        <p className=\"Arrow\" onClick={() => this.props.reassignCard(this.props.card.taskId, -1)}>{\"<\"}</p>\r\n                    </div> : <div></div>}\r\n                    <div className=\"TaskDescription\">\r\n                        <p>{this.props.card.task}</p>\r\n                    </div>\r\n                    {this.props.columnId === 0 || this.props.columnId === 1 ? <div className=\"moveRight\">\r\n                        <p className=\"Arrow\" onClick={() => this.props.reassignCard(this.props.card.taskId, 1)}>{\" > \"}</p>\r\n                    </div> : <div></div>}\r\n\r\n\r\n                </div>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Card","import React, { Component } from 'react'\r\nimport \"../styles/Column.css\"\r\nimport Card from './Card'\r\n\r\nclass Column extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            newTask: \"\",\r\n            currentTaskId: 0,\r\n        }\r\n        this.addCard = this.addCard.bind(this)\r\n        this.handleTaskChange = this.handleTaskChange.bind(this)\r\n    }\r\n    //This method assigns the state newTask with that provided by the user and calls the\r\n    //prop of the same name\r\n    //Paramters:\r\n    //event - the event that triggerd this method \r\n    addCard = (event) => {\r\n        if (event.keyCode === 13 || event.target.name === \"addcard\") {\r\n            if (this.state.newTask !== \"\") {\r\n                const newCard = { task: this.state.newTask, columnId: this.props.column.columnId }\r\n                this.props.addCard(newCard, this.props.column.columnId)\r\n                this.setState({ newTask: \"\", currentTaskId: this.state.currentTaskId + 1 })\r\n            }\r\n        }\r\n    }\r\n    //This method simply calls the prop of the same\r\n    //Parameters:\r\n    //taskId - the ID of the task to be reassigned\r\n    //direction - an integer denoting whether to move left(-1) or right(1)\r\n    reassignCard = (taskId, direction) => {\r\n        this.props.reassignCard(taskId, this.props.column.columnId, direction)\r\n\r\n    }\r\n    //This method simply calls prop of the same name\r\n    //Parameters:\r\n    //taskId : the ID of the task to be removed\r\n    removeCard = (taskId) => {\r\n        this.props.removeCard(taskId, this.props.column.columnId)\r\n    }\r\n    //This method is the event handler for onChange event of input text box\r\n    handleTaskChange = (event) => {\r\n        this.setState({ newTask: event.target.value })\r\n    }\r\n    componentDidMount() {\r\n        this.setState({ cards: this.props.cards, currentColumn: this.props.column.columnId })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Column\">\r\n                <h3>{this.props.column.columnTitle}</h3>\r\n                <hr />\r\n                {this.props.column.columnId === 0 ? <div className=\"TaskInput\">\r\n                    <input type=\"text\" placeholder=\"To Do\" value={this.state.newTask} onKeyDown={this.addCard} onChange={this.handleTaskChange} />\r\n                    <button className=\"AddButton\" name=\"addcard\" onClick={this.addCard} onKeyDown={this.addCard}>Add</button>\r\n                </div> : \"\"}\r\n                {this.props.column.cards.map((card, cardIndex) => (\r\n                    < Card key={cardIndex} card={card} removeCard={this.removeCard} reassignCard={this.reassignCard} columnId={this.props.column.columnId} />\r\n                ))}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Column","import React, { Component } from 'react'\r\nimport \"../App.css\"\r\nexport default class Header extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Head\">\r\n                <h1>Kanban Board</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\nimport Column from \"./components/Column\"\nimport Header from \"./components/Header\"\nimport \"./App.css\"\n//Application starts here\n//Application Flow:\n//1.The App component calls the Column component with each of the columns in the state as props\n//2.The Column component in turn calls the Card component with each of the card in the column object\n//3.Events to be handled are sent back up the chain to the parent App component to be handled\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      //stores the current task ID\n      currentTaskId: 0,\n      //Stores task data of each column\n      columns: [\n        //To do column\n        {\n          columnId: 0,\n          cards: [],\n          columnTitle: \"To do\"\n        },\n        //Doing column\n        {\n          columnId: 1,\n          cards: [],\n          columnTitle: \"Doing\"\n        },\n        //Done column\n        {\n          columnId: 2,\n          cards: [],\n          columnTitle: \"Done\"\n        }\n      ]\n    }\n  }\n  /*Each of the methods below are passed as props to the Component \"Column\"*/\n\n  //This method adds new cards to a specific column\n  //Parameters:\n  //newCard - new card to be added\n  //columnId - column in which new card is to be added\n  addCard = (newCard, columnId) => {\n    if (newCard.taskId === undefined) {\n      const currentTaskId = this.state.currentTaskId\n      newCard.taskId = this.state.currentTaskId\n      this.setState({ currentTaskId: currentTaskId + 1 })\n    }\n    let columns = this.state.columns\n    columns[columnId].cards.push(newCard)\n    this.setState({ columns: columns })\n  }\n  //This method removes card from a specific column\n  //Parameters:\n  //taskId - the task to be removed\n  //columnId- the column in which the task currently resides\n  removeCard = (taskId, columnId) => {\n    let cards = this.state.columns[columnId].cards\n    cards = cards.filter(card => {\n      return card.taskId !== taskId\n    })\n    let columns = this.state.columns\n    columns[columnId].cards = cards\n    this.setState({ columns: columns })\n  }\n  //This method calls both add card and remove card thereby reassigning a task\n  //Parameter:\n  //taskId - the ID of the task to be reassigned\n  //columnId - the column the task to be reassigned is currently in\n  //direction - an integer denoting whether to move left(-1) or right(1)\n  //            (decided in Card.js)\n  reassignCard = (taskId, columnId, direction) => {\n    const card = this.state.columns[columnId].cards.filter(card => {\n      return card.taskId === taskId\n    })\n    this.addCard(card[0], columnId + direction, this.removeCard(taskId, columnId))\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"Board\">\n          {this.state.columns.map((column, columnIndex) => (\n            <Column key={columnIndex} column={column} addCard={this.addCard} removeCard={this.removeCard} reassignCard={this.reassignCard} />\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}